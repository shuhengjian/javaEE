
#\u6570\u636e\u6e90\u8bbe\u7f6e
spring.datasource.url = jdbc:mysql://127.0.0.1:3307/musicbar?useSSL=false&characterEncoding=utf-8
spring.datasource.username = root
#Root1234!@#$
spring.datasource.password = 123
spring.datasource.driverClassName = com.mysql.jdbc.Driver
db.driverLocation=F:\\repository\\mysql\\mysql-connector-java\\5.1.38\\mysql-connector-java-5.1.38.jar
#db.driverLocation=D:\\maven\\repository\\mysql\\mysql-connector-java\\5.1.38\\mysql-connector-java-5.1.38.jar

#####datasource druid pool
#spring.datasource.druid.filters= stat
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.initial-size=10
spring.datasource.druid.max-active=20
spring.datasource.druid.min-idle=8
# \u914d\u7f6e\u83b7\u53d6\u8fde\u63a5\u7b49\u5f85\u8d85\u65f6\u7684\u65f6\u95f4
spring.datasource.druid.maxWait=60000
# \u914d\u7f6e\u95f4\u9694\u591a\u4e45\u624d\u8fdb\u884c\u4e00\u6b21\u68c0\u6d4b\uff0c\u68c0\u6d4b\u9700\u8981\u5173\u95ed\u7684\u7a7a\u95f2\u8fde\u63a5\uff0c\u5355\u4f4d\u662f\u6beb\u79d2
spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
# \u914d\u7f6e\u4e00\u4e2a\u8fde\u63a5\u5728\u6c60\u4e2d\u6700\u5c0f\u751f\u5b58\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u6beb\u79d2
spring.datasource.druid.minEvictableIdleTimeMillis=300000
spring.datasource.druid.validationQuery=select 1
spring.datasource.druid.testWhileIdle=false
spring.datasource.druid.testOnBorrow=true
spring.datasource.druid.testOnReturn=false
#\u914d\u7f6ewall filter 
spring.datasource.filter.wall.enabled=true
spring.datasource.filters.commons-log.connection-logger-name=stat,wall,log4j
spring.datasource.filter.wall.db-type=mysql
spring.datasource.filter.wall.config.alter-table-allow=false
spring.datasource.filter.wall.config.truncate-allow=false
spring.datasource.filter.wall.config.drop-table-allow=false
#\u662f\u5426\u5141\u8bb8\u975e\u4ee5\u4e0a\u57fa\u672c\u8bed\u53e5\u7684\u5176\u4ed6\u8bed\u53e5\uff0c\u7f3a\u7701\u5173\u95ed\uff0c\u901a\u8fc7\u8fd9\u4e2a\u9009\u9879\u5c31\u80fd\u591f\u5c4f\u853dDDL\u3002
spring.datasource.filter.wall.config.none-base-statement-allow=false
#\u68c0\u67e5UPDATE\u8bed\u53e5\u662f\u5426\u65e0where\u6761\u4ef6\uff0c\u8fd9\u662f\u6709\u98ce\u9669\u7684\uff0c\u4f46\u4e0d\u662fSQL\u6ce8\u5165\u7c7b\u578b\u7684\u98ce\u9669
spring.datasource.filter.wall.config.update-where-none-check=true
#SELECT ... INTO OUTFILE \u662f\u5426\u5141\u8bb8\uff0c\u8fd9\u4e2a\u662fmysql\u6ce8\u5165\u653b\u51fb\u7684\u5e38\u89c1\u624b\u6bb5\uff0c\u7f3a\u7701\u662f\u7981\u6b62\u7684
spring.datasource.filter.wall.config.select-into-outfile-allow=false
#\u662f\u5426\u5141\u8bb8\u8c03\u7528Connection.getMetadata\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u8c03\u7528\u4f1a\u66b4\u9732\u6570\u636e\u5e93\u7684\u8868\u4fe1\u606f
spring.datasource.filter.wall.config.metadata-allow=true
#\u5bf9\u88ab\u8ba4\u4e3a\u662f\u653b\u51fb\u7684SQL\u8fdb\u884cLOG.error\u8f93\u51fa
spring.datasource.filter.wall.log-violation=true
#\u5bf9\u88ab\u8ba4\u4e3a\u662f\u653b\u51fb\u7684SQL\u629b\u51faSQLExcepton
spring.datasource.filter.wall.throw-exception=true
